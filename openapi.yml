openapi: '3.0.2'
info:
  title: Ton Service
  version: '1.0'
servers:
  - url: https://api.server.test/v1

components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
          format: email
        taxId:
          type: string
          minLength: 11
          maxLength: 11
        phone:
          type: string
          minLength: 11
          maxLength: 11
        address:
          $ref: '#/components/schemas/Address'
      required:
        - taxId
        - email
        - name
    UserResponse:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            id:
              type: string
              maxLength: 36
          required:
            - id

    Address:
      type: object
      properties:
        country:
          type: string
        state:
          type: string
          maxLength: 30
        city:
          type: string
          maxLength: 50
        street:
          type: string
          maxLength: 80
        complement:
          type: string
          maxLength: 50
        number:
          type: number
          maxLength: 5
        zipCode:
          type: string
          minLength: 8
          maxLength: 8
      required:
        - street
        - city
        - country
        - state
        - zipCode
    VisitsHitsResponse:
      type: object
      properties:
        hits:
          type: number
          example: 9218
      required:
        - "hits"
    VisitsResponse:
      type: object
      properties:
        status:
          type: number
          example: 200
        path: 
          type: string
          example: 'tom.com.br/home'
        value:
          type: number
          example: 9218
        
paths:
  /visits:
    get:
      tags:
        - 'Visits'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitsHitsResponse'
          description: OK
  /visits/hit:
    get:
      tags:
        - 'Visits'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitsResponse'
          description: OK
  /user:
    post:
      tags:
        - 'User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK
        '400':
          description: Bad Request - Schema not matches
  /user/:id:
    get:
      tags:
        - 'User'
      parameters:
        - name: 'id'
          in: query
          required: true
          schema:
            type: string
            maxLength: 36
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
                  
          description: OK
        '404':
          description: Not Found

